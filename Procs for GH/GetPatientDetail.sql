USE `promed`;
DROP procedure IF EXISTS `GetPatientDetail`;

DELIMITER $$
USE `promed`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetPatientDetail`(in vaccountcode varchar(10))
begin 
/* johannes - future sp to use temp table and not one massive query that goes slow

    drop temporary table if exists tmp_patdetail;
	create temporary table if not exists tmp_patdetail (
	patientcode bigint,
	originalpatientcode bigint,
	patienttitle varchar(10),
	patientname varchar(80),
	patientsurname varchar(80),
	spatfullname varchar(150),
	patientidnumber varchar(20),
	patientdateofbirth timestamp,
	patientage integer,
	patientdateentered timestamp,
	patientpdependantno integer,
	patientappointment integer,
	patientuid varchar(64),
	patientactive integer,
	patientnonsaid integer,
	patientsmoking integer,
	patientvip integer,
	patientconsent integer,
	patientparentconsent integer,
	patientallergies varchar(100),
	patientoccupation varchar(80),
	patientinfo longtext,
	patientcompanyname varchar(80),
	patientweight integer,
	patientvalves integer,
	patientpregnant integer,
	patientpacemaker integer,
	patientmetalinhead integer,
	patientclips integer,
	patientcellphone varchar(20),
	patientsex varchar(10),
	patientlanguage char(1),
	patientemail varchar(150),
	patientemployeenumber varchar(20),
	patientfax varchar(20),
	patientcomspreference varchar(10),
	patienthometel varchar(20),
	patientworktel varchar(20),
	//sPatientUID varchar(64),
	//patientallergies,
	patientconditioncode varchar(2),
	mobility varchar(15),
	patienthasquote integer,
	membercode bigint,
	memberdateentered timestamp,
	memberdateofbirth timestamp,
	membermedicalaidclaim varchar(30),
	memberdependants integer,
	membervatno varchar(20),
	membertitle varchar(10),
	memberinitials varchar(5),
	membername varchar(80),
	membernextofkinname varchar(80),
	membernextofkinrelation varchar(20),
	membernonsaid integer,
	memberconsent integer,
	membermedicalaidref varchar(30),
	memberidnumber varchar(20),
	membercellphone varchar(20),
	membernextofkintel varchar(20),
	memberemployer varchar(50),
	memberoccupation varchar(80),
	memberworkdepartment varchar(50),
	memberfax varchar(20),
	memberemail varchar(150),
	memberemployeenumber varchar(30),
	membercompanynumber varchar(30),
	memberrelation varchar(20),
	membersurname varchar(80),
	memberhometel varchar(20),
	memberworktel varchar(20),
	memberrelation varchar(50),
	relation varchar(20),
	relationcode varchar(10),
	medicalaidcode varchar(10),
	medicalaidname varchar(100),
	globalmedicalaidcode varchar(10),
	medicalaidplanname varchar(100),
	homeaddressline1 varchar(100),
	homeaddressline2 varchar(100),
	homeaddressline3 varchar(100),
	homeaddressline4 varchar(100),
	homepostalcode varchar(10),
	relativeaddressline1 varchar(100),
	relativeaddressline2 varchar(100),
	relativeaddressline3 varchar(100), 
	relativeaddressline4 varchar(100),
	relativepostalcode varchar(10),
	postaladdressline1 varchar(100),
	postaladdressline2 varchar(100),
	postaladdressline3 varchar(100),
	postaladdressline4 varchar(100),
	postalcode varchar(10),
	workaddressline1 varchar(100),
	workaddressline2 varchar(100),
	workaddressline3 varchar(100),
	workaddressline4 varchar(100),
	workpostalcode varchar(10), 
	radiographer varchar(150),
	prioritystring varchar(10),
	sAccountCode varchar(15),
	dDateEntered timestamp,
	accountdoctormedia varchar(20),
	accountwca integer,
	accountmva integer,
	accountinteresting integer,
	accountarchive integer,
	accountusername varchar(20),
	accountpreviousimages integer,
	accountburncd integer,
	accountwaiting integer,
	accountpremergepatientid bigint,
	accountiloreporttypeid bigint,
	accounthospitalpatient integer,
	accounthospitalnumber varchar(20),
	noauthrequired integer,
	accountauthorizationnumber varchar(30),
	accountbreastfeeding integer,
	accounturgent integer,
	accountafterhours integer,
	accounthold integer,
	accountdespatch integer,
	accountmva integer,
	accountemail integer,
	accountburncd integer,
	accountcdcopies integer,
	accountcomment2 longtext,
	accountrestrictimages integer,
	accountvatinvoice integer,
	accountpatientrequestscd integer,
	accountdateofinjury timestamp,
	accountclaimnumber varchar(30),
	accountemployerregistrationname varchar(100),
	accountemployerregistrationnumber varchar(30),
	accountemployeremail varchar(150),  
	accountemployeraddressline1 varchar(100),
	accountemployeraddressline2 varchar(100),
	accountemployeraddressline3 varchar(100),
	accountemployeraddressline4 varchar(100),
	accountemployerpostalcode varchar(10),
	accountmethodofpayment varchar(20),
	accountflowstatus varchar(20),
	accountstatusrule varchar(20),
	accountflowgroupcode varchar(10),
	prioritynum integer,
	accountlockedbyoperatorcode varchar(10),
	accountfrozenbyoperatorcode varchar(10),
	branchcode varchar(10),
	branchdescription varchar(100),
	refdocname varchar(150),
	refdoccode varchar(10),
	secondaryrefdocname varchar(150),
	secodaryrefdoctel varchar(20),
	secodaryrefdocpracticenumber varchar(20),
	secodaryrefdoccode varchar(10),
	visitexaminationdate timestamp,
	wardcode varchar(10),
	warddescription varchar(100),
	wardpriority integer,
	refdoctitle varchar(10),
	refdocsurname varchar(100),
	refdoctel varchar(20),
	refdocpracticenumber varchar(20),
	accountexported integer,
	feeingstatus varchar(10),
	feeingtype bigint,
	legalentityid bigint,
	ipkAccountID bigint,
	patientpay integer,
	reportonly integer,
	ifkFeeMedicalAidID bigint,
	ifkMedicalAidID bigint,
	ifkSiteID bigint,
	sSiteFolder varchar(100),
	sSiteName varchar(100)	
	)  engine=memory ;

	
	select distinct 	p.ipkPatientID as patientcode,
							p.ifkOriginalPatientID as originalpatientcode,
							p.sTitle as patienttitle,
							p.sInitials as patientinitials,
							p.sName as patientname,
							p.sSurname as patientsurname,
							concat(p.sTitle, ' ', p.sName, ' ', p.sSurname) as spatfullname,
							p.sIDNumber as patientidnumber,
							p.dDateOfBirth as patientdateofbirth,
							year(current_timestamp) - year(p.dDateOfBirth) - (date_format(current_timestamp, '%m%d') < date_format(p.dDateOfBirth, '%m%d')) as patientage,
							p.dDateEntered as patientdateentered,
							p.iPDependantNo as patientpdependantno,
							p.bAppointment as patientappointment,
							p.sUID as patientuid,
							p.bActive as patientactive,
							p.bNonSAID as patientnonsaid,
							p.bSmoking as patientsmoking,
							p.bVIP as patientvip,
							p.bConsent as patientconsent,
							p.bParentConsent as patientparentconsent,
							p.sAllergies as patientallergies,
							p.sOccupation as patientoccupation,
							ph.tHistory as patientinfo,
							p.sCompanyName as patientcompanyname,
							p.iWeight as patientweight,
							p.bValves as patientvalves,
							p.bAsthma as patientasthma,
							a.bPregnant as patientpregnant,
							p.bPacemaker as patientpacemaker,
							p.bMetalInHead as patientmetalinhead,
							p.bClips as patientclips,
							p.sCellphone as patientcellphone,
							case p.sSex 
								when 'm'
									then 'male'
								when 'f'
									then 'female'
								else 'unknown'
							end as patientsex,
							p.sLanguage as patientlanguage,
							p.sEmail as patientemail,
							p.sEmployeeNumber as patientemployeenumber,
							p.sFax as patientfax,
							p.sComsPreference as patientcomspreference,
							p.sHomeTel as patienthometel,
							p.sWorkTel as patientworktel,
							p.sUID as sPatientUID,
							p.sAllergies as patientallergies,
							ps.sCode as patientconditioncode,
							ps.sDescription as mobility,
							0 as patienthasquote,
							m.ipkMemberID as membercode,
							m.dDateEntered as memberdateentered,
							m.dMemberDateOfBirth as memberdateofbirth,
							m.sMedicalAidClaim as membermedicalaidclaim,
							m.iDependants as memberdependants,
							m.sVatNo as membervatno,
							m.sTitle as membertitle,
							m.sInitials as memberinitials,
							m.sName as membername,
							m.sNextOfKinName as membernextofkinname,
							m.sNextOfKinRelation as membernextofkinrelation,
							m.bNonSAID as membernonsaid,
							m.bConsent as memberconsent,
							m.sMedicalAidReference as membermedicalaidref,
							m.sIDNumber as memberidnumber,
							m.sCellphone as membercellphone,
							m.sNextOfKinTel as membernextofkintel,
							m.sEmployer as memberemployer,
							m.sOccupation as memberoccupation,
							m.sWorkDepartment as memberworkdepartment,
							m.sFax as memberfax,
							m.sEmail as memberemail,
							m.sEmployeeNumber as memberemployeenumber,
							m.sCompanyNumber as membercompanynumber,
							m.sRelation as memberrelation,
							m.sSurname as membersurname,
							m.sHomeTel as memberhometel,
							m.sWorkTel as memberworktel,
							case r.sDescription
								when 'self'
									then r.sDescription
								else concat(r.sDescription, ' of member')
							end as memberrelation,
							r.sDescription as relation,
                            r.sCode as relationcode,
							ma.sCode as medicalaidcode,
							ma.sName as medicalaidname,
							map.sGlobalMedicalAidCode as globalmedicalaidcode,
							map.sOptionName as medicalaidplanname,
                            mahom.sAddressLine1 as homeaddressline1,
                            mahom.sAddressLine2 as homeaddressline2,
                            mahom.sAddressLine3 as homeaddressline3,
                            mahom.sAddressLine4 as homeaddressline4,
                            mahom.sPostalCode as homepostalcode,
							marel.sAddressLine1 as relativeaddressline1,
                            marel.sAddressLine2 as relativeaddressline2,
                            marel.sAddressLine3 as relativeaddressline3,
                            marel.sAddressLine4 as relativeaddressline4,
                            marel.sPostalCode as relativepostalcode,
							mapos.sAddressLine1 as postaladdressline1,
                            mapos.sAddressLine2 as postaladdressline2,
                            mapos.sAddressLine3 as postaladdressline3,
                            mapos.sAddressLine4 as postaladdressline4,
                            mapos.sPostalCode as postalcode,
							mawor.sAddressLine1 as workaddressline1,
                            mawor.sAddressLine2 as workaddressline2,
                            mawor.sAddressLine3 as workaddressline3,
                            mawor.sAddressLine4 as workaddressline4,
                            mawor.sPostalCode as workpostalcode,
							concat(o.sFirstNames, ' ', o.sLastName) as radiographer,
							case ifnull(ap.iPriority, 0)
								when 0 
									then 'none'
								when 1
									then 'high'
								when -1
									then 'low'
							end as prioritystring,
							a.sAccountCode,
							a.dDateEntered,
							case when (a.sDoctorMedia) <> 'cd'
								then case a.bBurnCD
										when 1
											then 'cd'
										else a.sDoctorMedia
									end
								else a.sDoctorMedia
							end accountdoctormedia,
							a.bWCA as accountwca,
                            a.bMVA as accountmva,
							a.bInteresting as accountinteresting,
							a.bArchive as accountarchive,
							a.sUserName as accountusername,
							a.bPreviousImages as accountpreviousimages,
							a.bBurnCD as accountburncd,
							a.bWaiting as accountwaiting,
							a.ifkPremergePatientID as accountpremergepatientid,
							a.ifkILOReportTypeID as accountiloreporttypeid,
							a.bHospitalPatient as accounthospitalpatient,
							a.sHospitalNumber as accounthospitalnumber,
                            a.bNoAuthRequired as noauthrequired,
							a.sAuthorization as accountauthorizationnumber,
							a.bBreastFeeding as accountbreastfeeding,
							a.bUrgent as accounturgent,
							a.bAfterHours as accountafterhours,
							a.bHold as accounthold,
							a.bDespatch as accountdespatch,
							a.bMVA as accountmva,
							a.bEMail as accountemail,
							a.bBurnCD as accountburncd,
							a.iCDCopies as accountcdcopies,
							acs.tComment as accountcomment2,
							a.bRestrictImages as accountrestrictimages,
                            a.bVATInvoice as accountvatinvoice,
                            a.bPatientRequestsCD as accountpatientrequestscd,
							wca.dDateOfInjury as accountdateofinjury,
							wca.sWCAClaimNumber as accountclaimnumber,
                            wca.sEmployerRegistrationName as accountemployerregistrationname,
                            wca.sEmployerRegistrationNumber as accountemployerregistrationnumber,
                            wca.sEmail as accountemployeremail, 
							wca.sAddressLine1 as accountemployeraddressline1,
                            wca.sAddressLine2 as accountemployeraddressline2,
                            wca.sAddressLine3 as accountemployeraddressline3,
                            wca.sAddressLine4 as accountemployeraddressline4,
                            wca.sPostalCode as accountemployerpostalcode,
							mop.sMethodOfPayment as accountmethodofpayment,
							afs.sDescription as accountflowstatus,
							afs.sStatusRule as accountstatusrule,
							afg.sCode as accountflowgroupcode,
							ifnull(ap.iPriority, 0) as prioritynum,
							olock.sOperatorCode as accountlockedbyoperatorcode,
							ofroz.sOperatorCode as accountfrozenbyoperatorcode,
							b.sBranchCode as branchcode,
							b.sDescription as branchdescription,
							concat(rd.sTitle, ' ', rd.sInitials, ' ', rd.sSurname) as refdocname,
							rd.sCode as refdoccode,
							concat(rd2.sTitle, ' ', rd2.sInitials, ' ', rd2.sSurname) as secondaryrefdocname,
							rd2.sTel as secodaryrefdoctel,
                            rd2.sPracticeNumber as secodaryrefdocpracticenumber,
							rd2.sCode as secodaryrefdoccode,
							cast(v.dExaminationDate as date) as visitexaminationdate,
							w.sCode as wardcode,
							w.sDescription as warddescription,
							w.bPriority as wardpriority,
							rd.sTitle as refdoctitle,
							concat(rd.sInitials, ', ', rd.sSurname) as refdocsurname,
							rd.sTel as refdoctel,
                            rd.sPracticeNumber as refdocpracticenumber,
                            case ifnull(a.dDateExported,0) when 0 then 0 else 1 end as accountexported,
                            fs.sFeeStatus as feeingstatus,
                            ft.ipkFeeingTypeID as feeingtype,
                            le.ipkLegalEntityID as legalentityid,
                            a.ipkAccountID,
                            a.bPatientPay as patientpay,
                            a.bReportOnly as reportonly,
                            a.ifkFeeMedicalAidID,
							m.ifkMedicalAidID,
							a.ifkSiteID,
							s.sSiteFolder,
							s.sSiteName
					from sites s,accounts a, patients p,members m,medical_aid ma ,  visit v,account_flow_statuses afs,wards w,branches b,account_flow_group afg,afg.ipkAccountFlowGroupID = a.ifkAccountFlowGroupID
						where a.sAccountCode = vaccountcode 
						and s.ipkSiteID = a.ifkSiteID
						and a.ifkPatientID = p.ipkPatientID
						and a.ifkMemberID = m.ipkMemberID
						and ma.ipkMedicalAidID = m.ifkMedicalAidID
						and v.ifkaccountID = a.ipkAccountID
						and afs.ipkAccountFlowStatusID = a.ifkAccountFlowStatusID
						and w.ipkWardID = a.ifkWardID
						and b.ipkBranchID = a.ifkBranchID;
*/
	select distinct 	p.ipkPatientID as patientcode,
							p.ifkOriginalPatientID as originalpatientcode,
							p.sTitle as patienttitle,
							p.sInitials as patientinitials,
							p.sName as patientname,
							p.sSurname as patientsurname,
							concat(p.sTitle, ' ', p.sName, ' ', p.sSurname) as spatfullname,
							p.sIDNumber as patientidnumber,
							p.dDateOfBirth as patientdateofbirth,
							year(current_timestamp) - year(p.dDateOfBirth) - (date_format(current_timestamp, '%m%d') < date_format(p.dDateOfBirth, '%m%d')) as patientage,
							p.dDateEntered as patientdateentered,
							p.iPDependantNo as patientpdependantno,
							p.bAppointment as patientappointment,
							p.sUID as patientuid,
							p.bActive as patientactive,
							p.bNonSAID as patientnonsaid,
							p.bSmoking as patientsmoking,
							p.bVIP as patientvip,
							p.bConsent as patientconsent,
							p.bParentConsent as patientparentconsent,
							p.sAllergies as patientallergies,
							p.sOccupation as patientoccupation,
							ph.tHistory as patientinfo,
							p.sCompanyName as patientcompanyname,
							p.iWeight as patientweight,
							p.bValves as patientvalves,
							p.bAsthma as patientasthma,
							a.bPregnant as patientpregnant,
							p.bPacemaker as patientpacemaker,
							p.bMetalInHead as patientmetalinhead,
							p.bClips as patientclips,
							p.sCellphone as patientcellphone,
							case p.sSex 
								when 'm'
									then 'male'
								when 'f'
									then 'female'
								else 'unknown'
							end as patientsex,
							p.sLanguage as patientlanguage,
							p.sEmail as patientemail,
							p.sEmployeeNumber as patientemployeenumber,
							p.sFax as patientfax,
							p.sComsPreference as patientcomspreference,
							p.sHomeTel as patienthometel,
							p.sWorkTel as patientworktel,
							p.sUID as sPatientUID,
							p.sAllergies as patientallergies,
							ps.sCode as patientconditioncode,
							ps.sDescription as mobility,
							0 as patienthasquote,
							m.ipkMemberID as membercode,
							m.dDateEntered as memberdateentered,
							m.dMemberDateOfBirth as memberdateofbirth,
							m.sMedicalAidClaim as membermedicalaidclaim,
							m.iDependants as memberdependants,
							m.sVatNo as membervatno,
							m.sTitle as membertitle,
							m.sInitials as memberinitials,
							m.sName as membername,
							m.sNextOfKinName as membernextofkinname,
							m.sNextOfKinRelation as membernextofkinrelation,
							m.bNonSAID as membernonsaid,
							m.bConsent as memberconsent,
							m.sMedicalAidReference as membermedicalaidref,
							m.sIDNumber as memberidnumber,
							m.sCellphone as membercellphone,
							m.sNextOfKinTel as membernextofkintel,
							m.sEmployer as memberemployer,
							m.sOccupation as memberoccupation,
							m.sWorkDepartment as memberworkdepartment,
							m.sFax as memberfax,
							m.sEmail as memberemail,
							m.sEmployeeNumber as memberemployeenumber,
							m.sCompanyNumber as membercompanynumber,
							m.sRelation as memberrelation,
							m.sSurname as membersurname,
							m.sHomeTel as memberhometel,
							m.sWorkTel as memberworktel,
							case r.sDescription
								when 'self'
									then r.sDescription
								else concat(r.sDescription, ' of member')
							end as memberrelation,
							r.sDescription as relation,
                            r.sCode as relationcode,
							ma.sCode as medicalaidcode,
							ma.sName as medicalaidname,
							ma.sEmail as smedicalemail,
							map.sGlobalMedicalAidCode as globalmedicalaidcode,
							map.sOptionName as medicalaidplanname,
                            mahom.sAddressLine1 as homeaddressline1,
                            mahom.sAddressLine2 as homeaddressline2,
                            mahom.sAddressLine3 as homeaddressline3,
                            mahom.sAddressLine4 as homeaddressline4,
                            mahom.sPostalCode as homepostalcode,
							marel.sAddressLine1 as relativeaddressline1,
                            marel.sAddressLine2 as relativeaddressline2,
                            marel.sAddressLine3 as relativeaddressline3,
                            marel.sAddressLine4 as relativeaddressline4,
                            marel.sPostalCode as relativepostalcode,
							mapos.sAddressLine1 as postaladdressline1,
                            mapos.sAddressLine2 as postaladdressline2,
                            mapos.sAddressLine3 as postaladdressline3,
                            mapos.sAddressLine4 as postaladdressline4,
                            mapos.sPostalCode as postalcode,
							mawor.sAddressLine1 as workaddressline1,
                            mawor.sAddressLine2 as workaddressline2,
                            mawor.sAddressLine3 as workaddressline3,
                            mawor.sAddressLine4 as workaddressline4,
                            mawor.sPostalCode as workpostalcode,
							concat(o.sFirstNames, ' ', o.sLastName) as radiographer,
							case ifnull(ap.iPriority, 0)
								when 0 
									then 'none'
								when 1
									then 'high'
								when -1
									then 'low'
							end as prioritystring,
							a.sAccountCode,
							a.dDateEntered, 
							case when (rd.sDoctorMedia) <> 'cd'
								then case a.bBurnCD
										when 1
											then 'cd'
										else rd.sDoctorMedia
									end
								else rd.sDoctorMedia
							end accountdoctormedia,
							a.bWCA as accountwca,
                            a.bMVA as accountmva,
							a.bInteresting as accountinteresting,
							a.bArchive as accountarchive,
							a.sUserName as accountusername,
							a.bPreviousImages as accountpreviousimages,
							a.bBurnCD as accountburncd,
							a.bWaiting as accountwaiting,
							a.ifkPremergePatientID as accountpremergepatientid,
							/*a.ifkILOReportTypeID as accountiloreporttypeid,*/
							a.bHospitalPatient as accounthospitalpatient,
							a.sHospitalNumber as accounthospitalnumber,
                            a.bNoAuthRequired as noauthrequired,
							a.sAuthorization as accountauthorizationnumber,
							a.bBreastFeeding as accountbreastfeeding,
							a.bUrgent as accounturgent,
							a.bAfterHours as accountafterhours,
							a.bHold as accounthold,
							a.bDespatch as accountdespatch,
							a.bMVA as accountmva,
							a.bEMail as accountemail,
							a.bBurnCD as accountburncd,
							a.iCDCopies as accountcdcopies,
							acs.tComment as accountcomment2,
							a.bRestrictImages as accountrestrictimages,
                            a.bVATInvoice as accountvatinvoice,
                            a.bPatientRequestsCD as accountpatientrequestscd,
							wca.dDateOfInjury as accountdateofinjury,
							wca.sWCAClaimNumber as accountclaimnumber,
                            wca.sEmployerRegistrationName as accountemployerregistrationname,
                            wca.sEmployerRegistrationNumber as accountemployerregistrationnumber,
                            wca.sEmail as accountemployeremail, 
							wca.sAddressLine1 as accountemployeraddressline1,
                            wca.sAddressLine2 as accountemployeraddressline2,
                            wca.sAddressLine3 as accountemployeraddressline3,
                            wca.sAddressLine4 as accountemployeraddressline4,
                            wca.sPostalCode as accountemployerpostalcode,
							mop.sMethodOfPayment as accountmethodofpayment,
							afs.sDescription as accountflowstatus,
							afs.sStatusRule as accountstatusrule,
							afg.sCode as accountflowgroupcode,
							ifnull(ap.iPriority, 0) as prioritynum,
							olock.sOperatorCode as accountlockedbyoperatorcode,
							ofroz.sOperatorCode as accountfrozenbyoperatorcode,
							b.sBranchCode as branchcode,
							b.sDescription as branchdescription,
							concat(rd.sTitle, ' ', rd.sInitials, ' ', rd.sSurname) as refdocname,
							rd.sCode as refdoccode,
							concat(rd2.sTitle, ' ', rd2.sInitials, ' ', rd2.sSurname) as secondaryrefdocname,
							rd2.sTel as secodaryrefdoctel,
                            rd2.sPracticeNumber as secodaryrefdocpracticenumber,
							rd2.sCode as secodaryrefdoccode,
							cast(v.dExaminationDate as date) as visitexaminationdate,
							w.sCode as wardcode,
							w.sDescription as warddescription,
							w.bPriority as wardpriority,
							rd.sTitle as refdoctitle,
							concat(rd.sInitials, ', ', rd.sSurname) as refdocsurname,
							rd.sTel as refdoctel,
                            rd.sPracticeNumber as refdocpracticenumber,
                            case ifnull(a.dDateExported,0) when 0 then 0 else 1 end as accountexported,
                            fs.sFeeStatus as feeingstatus,
                            ft.ipkFeeingTypeID as feeingtype,
                            le.ipkLegalEntityID as legalentityid,
                            a.ipkAccountID,
                            a.bPatientPay as patientpay,
                            a.bReportOnly as reportonly,
                            a.ifkFeeMedicalAidID,
							a.ifkFeeMedicalAidPlanID,
							m.ifkMedicalAidID,
							a.ifkSiteID,
							s.sSiteFolder,
							s.sSiteName,
							a.bDebtorAccount,
							s.sFinalNoticeReport,
							s.sHandOverReport,
							s.sStatementReport,
							s.sReceiptReport,
							s.sJobcardReport,
							s.sPatientInfoReport,
							s.sLabelReport,
							s.sStatementExclReport,
							s.sQuoteReport,
                            a.fBalance,
                            a.fVatTotal,
                            a.fReceiptTotal,
                            q.ipkQuoteID
                            
					from sites s, accounts a
					left join patients p on a.ifkPatientID = p.ipkPatientID
					left join members m on a.ifkMemberID = m.ipkMemberID
					left join member_address_groups mahom on mahom.ifkMemberID = m.ipkMemberID and mahom.sCode = 'h'
					left join member_address_groups marel on marel.ifkMemberID = m.ipkMemberID and marel.sCode = 'r'
					left join member_address_groups mapos on mapos.ifkMemberID = m.ipkMemberID and mapos.sCode = 'p'
					left join member_address_groups mawor on mawor.ifkMemberID = m.ipkMemberID and mawor.sCode = 'e'   
					left join relations r on r.ipkRelationID = p.ifkRelationID
					left join medical_aid ma on ma.ipkMedicalAidID = m.ifkMedicalAidID
					left join medical_aid_plan map on map.ipkMedicalAidPlanID = m.ifkMedicalAidPlanID
					left join visit v on v.ifkaccountID = a.ipkAccountID
					left join operators o on o.ipkOperatorID = v.ifkRadiographerOperatorID
					left join operator_types op on o.ifkOperatorTypeID = op.ipkOperatorTypeID and op.sType = 'g'
					left join account_priorities ap on ap.ifkaccountID = a.ipkAccountID
					left join patient_conditions ps on ps.ipkPatientConditionID = a.ifkPatientConditionID
					left join referring_doctors rd on rd.ipkReferringDoctorID = a.ifkPrimaryReferringDoctorID
					left join account_flow_statuses afs on afs.ipkAccountFlowStatusID = a.ifkAccountFlowStatusID
					left join operators olock on olock.ipkOperatorID = a.ifkLockedByOperatorsID
					left join operators ofroz on ofroz.ipkOperatorID = a.ifkFrozenByOperatorID
					left join wards w on w.ipkWardID = a.ifkWardID
					left join branches b on b.ipkBranchID = a.ifkBranchID
					left join referring_doctors rd2 on rd2.ipkReferringDoctorID = a.ifkSecondaryReferringDoctorID
					left join account_flow_group afg on afg.ipkAccountFlowGroupID = a.ifkAccountFlowGroupID
					left join wca wca on wca.ifkaccountID = a.ipkAccountID
					left join methods_of_payment mop on mop.ipkMethodOfPaymentID = a.ifkMethodOfPaymentID
					left join feeing_statuses fs on fs.ipkFeeingStatusID = a.ifkFeeingStatusID
					left join feeing_types ft on ft.ipkFeeingTypeID = a.ifkFeeingTypeID
					left join account_comments acs on acs.ifkaccountID = a.ipkAccountID
					left join patient_history ph on ph.ifkPatientID = p.ipkPatientID
					left join legal_entities le on le.ipkLegalEntityID = a.ifkLegalEntityID 
					left join quote q on q.ifkAccountID = a.ipkAccountID
					where a.sAccountCode = vaccountcode and s.ipkSiteID = a.ifkSiteID;
end$$

DELIMITER ;

